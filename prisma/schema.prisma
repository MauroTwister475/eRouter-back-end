generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id         String   @id @default(uuid())
  username   String   @unique
  email      String   @unique
  password   String
  picture    String?
  userType   String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

// model UserAccess {
//   id         String   @id @default(uuid())
//   User       User?    @relation(fields: [userId], references: [id])
//   userId     String?
//   Access     Access?  @relation(fields: [accessId], references: [id])
//   accessId   String?
//   created_at DateTime @default(now())
//   updated_at DateTime @updatedAt
// }

// model Access {
//   id         String       @id @default(uuid())
//   name       String       @unique
//   userAccess UserAccess[]
//   created_at DateTime     @default(now())
//   updated_at DateTime     @updatedAt
// }

model Driver {
  id                 String          @id @default(uuid())
  username           String          @unique
  picture            String?
  yearOfWorkAsDriver Int
  vehicles           VehicleDriver[]
  travels            Travel[]
  allocation         Allocation[]
}

model VehicleDriver {
  driver    Driver   @relation(fields: [driverId], references: [id])
  driverId  String
  vehicle   Vehicle  @relation(fields: [vehicleId], references: [id])
  vehicleId String
  createAt  DateTime @default(now())

  @@id([driverId, vehicleId])
}

model Allocation {
  id        String @id @default(uuid())
  vehicleId String
  routeId   String
  driverId  String

  vehicle Vehicle @relation(fields: [vehicleId], references: [id])
  route   Route   @relation(fields: [routeId], references: [id])
  driver  Driver  @relation(fields: [driverId], references: [id])
}

model Stop {
  id        String @id @default(uuid())
  name      String
  routeId   String
  latitude  String
  longitude String

  route  Route    @relation(fields: [routeId], references: [id])
  Travel Travel[]
}

model Route {
  id          String       @id @default(uuid())
  name        String
  startLat    String
  destinyLat  String
  startLong   String
  destinyLong String
  stops       Stop[]
  allocations Allocation[]
}

model Student {
  id            String  @id @default(uuid())
  name          String
  class         String
  qrcode        String
  responsableId String
  vehicleId     String?

  vehicle       Vehicle?     @relation(fields: [vehicleId], references: [id])
  Responsible   Responsible? @relation(fields: [responsibleId], references: [id])
  responsibleId String?
}

model Vehicle {
  id            String          @id @default(uuid())
  model         String
  plate         String
  capacity      Int
  drivers       VehicleDriver[]
  students      Student[]
  travels       Travel[]
  Allocation    Allocation[]
  // totalStudents totalStudents[]
  VehicleStatus VehicleStatus[]
}

model Responsible {
  id          String    @id @default(uuid())
  fullname    String
  profission  String
  phoneNumber String
  students    Student[]
}

model Travel {
  id        String @id @default(uuid())
  vehicleId String
  startTime Int
  endTime   Int
  stopId    String
  routeId   String

  vehicle  Vehicle @relation(fields: [vehicleId], references: [id])
  stop     Stop    @relation(fields: [stopId], references: [id])
  Driver   Driver? @relation(fields: [driverId], references: [id])
  driverId String?
}

model totalStudents {
  id        String @id @default(uuid())
  total     Int
  // vehicleId String

  // vehicle  Vehicle @relation(fields: [vehicleId], references: [id])
  // driverId String?
}

model VehicleStatus {
  id             String @id @default(uuid())
  vehicleId      String
  totalStudents  Int?   @default(0)
  availableSeats Int?

  vehicle Vehicle @relation(fields: [vehicleId], references: [id])
}
